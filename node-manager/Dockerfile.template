# Define a reusable argument containing the path to the go project
# see: https://docs.docker.com/engine/reference/builder/#understand-how-arg-and-from-interact
ARG PROJECT_DIR=/go/src/github.com/resin-io/edge-node-manager
ARG GLIDE_DIR=/go/src/github.com/Masterminds


# Build source using an image that has Go and Glide
FROM balenalib/%%BALENA_MACHINE_NAME%%-golang:latest-build AS GO

ARG GLIDE_DIR
RUN  mkdir -p $GLIDE_DIR
RUN  cd $GLIDE_DIR &&  git clone https://github.com/Masterminds/glide.git 
WORKDIR $GLIDE_DIR/glide
RUN make install

ARG PROJECT_DIR

RUN  mkdir -p $PROJECT_DIR
COPY . $PROJECT_DIR
WORKDIR $PROJECT_DIR

# Use Glide to install Go dependencies
RUN glide install

# Cross compile the ENM binary
RUN env GOOS=linux GOARCH=arm go build
# RUN env GOOS=linux GOARCH=amd64 go build

# Debian base-image
# See more about resin base images here: http://docs.resin.io/runtime/resin-base-images/
FROM balenalib/%%BALENA_MACHINE_NAME%%-debian

ARG PROJECT_DIR

# Set our working directory
WORKDIR /usr/src/app
# The raspberrypi3 requires extra packages - `bluez-firmware`
ENV EXTRA_PACKAGES ""
RUN if [ "%%BALENA_MACHINE_NAME%%" = "raspberrypi3" ]; then export EXTRA_PACKAGES="bluez-firmware"; fi && \
    install_packages \
    $EXTRA_PACKAGES \
    bluez \
    curl \
    jq

# Copy the cross-compiled binary into the working directory
COPY --from=GO $PROJECT_DIR/edge-node-manager ./

# The edge-node-manager will run when container starts up on the device
COPY start.sh ./
RUN chmod u+x start.sh
CMD ["./start.sh"]
